[tool.poetry]
name = "fastadmin"
version = "0.1.40"
description = ""
authors = ["Seva D <vsdudakov@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/vsdudakov/fastadmin"
repository = "https://github.com/vsdudakov/fastadmin"
keywords = ["fastapi", "admin"]
classifiers = [
    "Environment :: Console",
    "Framework :: FastAPI",
    "Framework :: Django",
    "Framework :: Flask",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Widget Sets",
]
include = [
    "LICENSE",
]
packages = [
    { include = "fastadmin" },
]

[tool.poetry.dependencies]
python = "^3.10"
jinja2 = "^3.1.2"
pyjwt = "^2.6.0"
python-dotenv = "^1.0.0"
asgiref = "^3.6.0"
pydantic = "^1.10.7"

fastapi = { version = "0.*", optional = true }
flask = { version = "2.*", optional = true }
django = { version = "4.*", optional = true }
tortoise-orm = { version = "0.*", optional = true }
sqlalchemy = { version = "2.*", optional = true }
pony = { version = "0.*", optional = true }
isort = "^5.12.0"

[tool.poetry.extras]
fastapi = ["fastapi"]
flask = ["flask"]
django = ["django"]
tortoise-orm = ["tortoise-orm"]
sqlalchemy = ["sqlalchemy"]
pony = ["pony"]

[tool.poetry.group.dev.dependencies]
uvicorn = "^0.20.0"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-asyncio = "^0.20.3"
black = "^23.1.0"
mypy = "^1.0.1"
httpx = "^0.23.3"
aioshutil = "^1.2"
jinja2 = "^3.1.2"
htmlmin = "^0.1.12"
bcrypt = "^4.0.1"
ruff = "^0.0.272"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
line_length = 120
profile = "black"
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALPROJECT",
    "LOCALFOLDER",
]
default_section = "THIRDPARTY"
known_localproject = ["fastadmin", "tests"]

[tool.black]
line-length = 120
exclude = ".git|.pytest_cache|.venv|.env|venv|env|static"

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    "F",       # pyflakes
    "E",       # pycodestyle
    "W",       # pycodestyle
    "UP",      # pyupgrade
    "YTT",     # flake8-2020
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "A001",    # flake8-builtins
    "C4",      # flake8-comprehensions
    "DTZ",     # flake8-datetimez
    "T10",     # flake8-debugger
    "ISC",     # flake8-implicit-str-concat
    "G",       # flake8-logging-format
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PT",      # flake8-pytest-style
    "RET501",  # flake8-return
    "RET502",  # flake8-return
    "SIM",     # flake8-simplify
    "PTH",     # flake8-use-pathlib
    "PGH",     # pygrep-hooks
    "PLC",     # pylint
    "PLE",     # pylint
    "RUF",     # ruff-specific
]
fixable = [
    "F401",    # unused imports
]
ignore = [
    "E501",    # 'black' handles line length
    "F405",    # defined from star import
    "S101",    # impossible logic branches are denoted with 'assert'
    "S104",    # bind to all interfaces is OK in Docker
    "S105",
    "S106",
    "B008",    # function call (e.g. `Depends`) in argument defaults
    "PT004",   # fixtures that don't return a value must start with an underscore
    "SIM108",  # use ternary operator ... instead of if-else-block
]

[tool.ruff.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.mypy]
python_version = "3.10"
pretty = true
ignore_missing_imports = true
disable_error_code = ["attr-defined", "assignment", "var-annotated", "call-overload"]
